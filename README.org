#+TITLE: README

We are interested in the /physical/ structure of Hardware Designs, that is how they are wired rather than how they behave.
Ostensibly, SystemV is a subset of SystemVerilog (a well-known Hardware Design & Verification language) that captures salient structural properties of SystemVerilog-style Hardware Design.

We had a similar project (System-V) that was not received well by reviewers.
This project is System-V2 but with some lessons learned from other projects, some new ideas, and much like the phoenix 'new ends from beginnings'.

* What are we interested in

Specifically, we are interested in:

1. How to represent modular hardware designs;
2. How to 'correctly' wire hardware components together;
3. How to represent and automatically reason about the emergent properties of data structures both nominally and structurally;

* What we are not interested in

Specifically, we are not interested in:

1. What happens to values
2. General behaviourally aspects of a design.

We are /just/ interested in wiring things together.

We do so by basing the formalism around what we know when working with the Simply-Typed Lambda Calculus & imperative languages but following (System)Verilog constructs more closely.
Not to mention other interesting type-theoretic structures.

* Contributions

Our contributions are, or will be, that we have:

1. grounded the design and formalisation of SystemV as a typed lambda calculus;
2. used (or will use) mathematical structures to reason about data structures and their properties;
3. mechanised our formalisation in Idris2, a known dependently-typed general purpose functional programming language;
4. presented our formalisms as /verified compilers/ for creating hardware designs using DSLs that look almost like SystemVerilog;
5. extended and expanded the formalism in novel ways to explore the SystemVerilog design space

We position SystemV as a base formalism that we will look to either:

+ extend :: by introducing new reducible terms;
+ expand :: by introducing new values;
+ excite :: by taking *full* advantage of the STLC as a host formalism;

Doing so supports:

1. reasoning about more SystemVerilog design constructs (extending/expanding);
2. investigation of novel extensions (expanding/exciting);
3. designing new and interesting language features (expanding/exciting);

* Note

This is a constant work in progress.
Many of the ideas are currently scribbled on scraps of paper, or lost in the depths of complicated TeX for type-setting.
We are currently mechanising them for demonstrable, reproducible proofs of correctness.

The code is not polished.
